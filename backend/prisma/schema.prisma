// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String?   @map("password_hash")
  name             String?
  avatarUrl        String?   @map("avatar_url")
  role             UserRole  @default(CREATOR)
  emailVerified    Boolean   @default(false) @map("email_verified")
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  lastLoginAt      DateTime? @map("last_login_at")

  // Relations
  sessions           Session[]
  oauthProviders     OAuthProvider[]
  twoFactorAuth      TwoFactorAuth?
  contentGenerations ContentGeneration[]
  contentLibrary     ContentLibrary[]
  subscriptions      Subscription[]
  usageRecords       UsageRecord[]
  invoices           Invoice[]
  paymentMethods     PaymentMethod[]
  billingEvents      BillingEvent[]
  supportTickets     SupportTicket[]
  auditLogs          AuditLog[]
  dashboards         Dashboard[]
  contentDrafts      ContentDraft[]
  contentTemplates   ContentTemplate[]
  userMetrics        UserMetrics[]
  adminActions       UserManagement[]
  contentModerations ContentModeration[]
  PlatformConnection PlatformConnection[]
  PublishingJob      PublishingJob[]
  ContentSchedule    ContentSchedule[]
  Analytics          Analytics[]
  AnalyticsReport    AnalyticsReport[]
  PlatformInsights   PlatformInsights[]
  AdminUser          AdminUser[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  token        String   @unique
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  deviceInfo   Json?    @map("device_info")
  ipAddress    String?  @map("ip_address")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model OAuthProvider {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  provider       Platform
  providerUserId String    @map("provider_user_id")
  accessToken    String    @map("access_token")
  refreshToken   String?   @map("refresh_token")
  tokenExpiresAt DateTime? @map("token_expires_at")
  scope          String[]
  accountName    String    @map("account_name")
  accountAvatar  String?   @map("account_avatar")
  connectedAt    DateTime  @default(now()) @map("connected_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  platformConnections PlatformConnection[]

  @@unique([userId, provider])
  @@map("oauth_providers")
}

model TwoFactorAuth {
  id          String    @id @default(cuid())
  userId      String    @unique @map("user_id")
  secret      String
  backupCodes String[]  @map("backup_codes")
  enabledAt   DateTime  @default(now()) @map("enabled_at")
  lastUsedAt  DateTime? @map("last_used_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

// Content Generation Models
model ContentGeneration {
  id                 String           @id @default(cuid())
  userId             String           @map("user_id")
  prompt             String
  enhancedPrompt     String?          @map("enhanced_prompt")
  status             GenerationStatus @default(PENDING)
  progressPercentage Int              @default(0) @map("progress_percentage")
  generatedVideoUrl  String?          @map("generated_video_url")
  videoDuration      Int?             @map("video_duration")
  videoResolution    String?          @map("video_resolution")
  generationMetadata Json             @map("generation_metadata")
  errorMessage       String?          @map("error_message")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  completedAt        DateTime?        @map("completed_at")

  // Relations
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedContent GeneratedContent[]
  generationQueue  GenerationQueue[]
  publishingJobs   PublishingJob[]
  contentLibrary   ContentLibrary[]

  @@map("content_generations")
}

model GeneratedContent {
  id           String      @id @default(cuid())
  generationId String      @map("generation_id")
  contentType  ContentType
  contentUrl   String?     @map("content_url")
  contentText  String?     @map("content_text")
  platform     Platform    @default(ALL)
  metadata     Json
  qualityScore Decimal?    @map("quality_score")
  createdAt    DateTime    @default(now()) @map("created_at")

  // Relations
  generation ContentGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@map("generated_content")
}

model AIProvider {
  id             String         @id @default(cuid())
  name           String         @unique
  status         ProviderStatus @default(ACTIVE)
  rateLimit      Int            @map("rate_limit")
  costPerRequest Decimal        @map("cost_per_request")
  qualityRating  Decimal        @map("quality_rating")
  lastUsedAt     DateTime?      @map("last_used_at")
  errorCount     Int            @default(0) @map("error_count")
  successCount   Int            @default(0) @map("success_count")

  @@map("ai_providers")
}

model GenerationQueue {
  id            String    @id @default(cuid())
  generationId  String    @map("generation_id")
  priority      Priority  @default(NORMAL)
  attempts      Int       @default(0)
  maxAttempts   Int       @default(3) @map("max_attempts")
  nextRetryAt   DateTime? @map("next_retry_at")
  queuePosition Int       @map("queue_position")
  createdAt     DateTime  @default(now()) @map("created_at")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")

  // Relations
  generation ContentGeneration @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@map("generation_queue")
}

// Platform Integration Models
model PlatformConnection {
  id                 String           @id @default(cuid())
  userId             String           @map("user_id")
  platform           Platform
  accountId          String           @map("account_id")
  accountName        String           @map("account_name")
  accountUsername    String           @map("account_username")
  accountAvatar      String?          @map("account_avatar")
  accessToken        String           @map("access_token")
  refreshToken       String?          @map("refresh_token")
  tokenExpiresAt     DateTime?        @map("token_expires_at")
  scopes             String[]
  status             ConnectionStatus @default(ACTIVE)
  lastSyncAt         DateTime?        @map("last_sync_at")
  errorMessage       String?          @map("error_message")
  connectionMetadata Json             @map("connection_metadata")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauthProvider  OAuthProvider   @relation(fields: [userId, platform], references: [userId, provider])
  publishingJobs PublishingJob[]

  @@unique([userId, platform, accountId])
  @@map("platform_connections")
}

// Define enums
enum UserRole {
  CREATOR
  ADMIN
}

enum Platform {
  YOUTUBE
  TIKTOK
  INSTAGRAM
  TWITTER
  ALL
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ContentType {
  VIDEO
  SCRIPT
  THUMBNAIL
  CAPTION
  HASHTAGS
}

enum ProviderStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum Priority {
  LOW
  NORMAL
  HIGH
}

enum ConnectionStatus {
  ACTIVE
  EXPIRED
  ERROR
  DISCONNECTED
}

enum PublishingStatus {
  PENDING
  PROCESSING
  PUBLISHED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  PAYPAL
}

enum BillingEventType {
  SUBSCRIPTION_CREATED
  SUBSCRIPTION_UPDATED
  PAYMENT_SUCCEEDED
  PAYMENT_FAILED
  USAGE_RECORDED
}

enum UsageType {
  VIDEO_GENERATION
  API_CALLS
  STORAGE_GB
  PLATFORM_CONNECTIONS
}

// Publishing Models
model PublishingJob {
  id                   String           @id @default(cuid())
  userId               String           @map("user_id")
  generationId         String           @map("generation_id")
  platformConnectionId String           @map("platform_connection_id")
  platform             Platform
  contentType          ContentType      @default(VIDEO)
  status               PublishingStatus @default(PENDING)
  scheduledAt          DateTime?        @map("scheduled_at")
  publishedAt          DateTime?        @map("published_at")
  platformPostId       String?          @map("platform_post_id")
  platformUrl          String?          @map("platform_url")
  errorMessage         String?          @map("error_message")
  retryCount           Int              @default(0) @map("retry_count")
  maxRetries           Int              @default(3) @map("max_retries")
  publishingMetadata   Json             @map("publishing_metadata")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime         @updatedAt @map("updated_at")

  // Relations
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation         ContentGeneration  @relation(fields: [generationId], references: [id], onDelete: Cascade)
  platformConnection PlatformConnection @relation(fields: [platformConnectionId], references: [id], onDelete: Cascade)
  platformContent    PlatformContent[]

  @@map("publishing_jobs")
}

model PlatformContent {
  id              String   @id @default(cuid())
  publishingJobId String   @map("publishing_job_id")
  platform        Platform
  title           String?
  description     String?
  hashtags        String[]
  videoUrl        String?  @map("video_url")
  thumbnailUrl    String?  @map("thumbnail_url")
  duration        Int?
  privacy         String   @default("public")
  category        String?
  tags            String[]
  customMetadata  Json     @map("custom_metadata")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  publishingJob PublishingJob @relation(fields: [publishingJobId], references: [id], onDelete: Cascade)

  @@map("platform_content")
}

model PlatformAPI {
  id           String    @id @default(cuid())
  platform     Platform
  endpoint     String
  rateLimit    Int       @map("rate_limit")
  rateWindow   Int       @map("rate_window")
  currentUsage Int       @default(0) @map("current_usage")
  resetAt      DateTime  @map("reset_at")
  status       String    @default("operational")
  lastCheckAt  DateTime? @map("last_check_at")
  responseTime Int?      @map("response_time")
  errorRate    Decimal   @default(0.0) @map("error_rate")

  @@unique([platform, endpoint])
  @@map("platform_apis")
}

// Content Management Models
model ContentLibrary {
  id           String               @id @default(cuid())
  userId       String               @map("user_id")
  generationId String?              @map("generation_id")
  title        String
  description  String?
  status       ContentLibraryStatus @default(DRAFT)
  contentType  ContentType          @default(VIDEO)
  thumbnailUrl String?              @map("thumbnail_url")
  videoUrl     String?              @map("video_url")
  duration     Int?
  platforms    Platform[]
  tags         String[]
  category     String?
  visibility   String               @default("private")
  metadata     Json
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  publishedAt  DateTime?            @map("published_at")

  // Relations
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation         ContentGeneration?   @relation(fields: [generationId], references: [id], onDelete: SetNull)
  contentSchedule    ContentSchedule[]
  analytics          Analytics[]
  contentPerformance ContentPerformance[]
  ContentModeration  ContentModeration[]

  @@map("content_library")
}

model ContentSchedule {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  contentId         String   @map("content_id")
  platform          Platform
  scheduledAt       DateTime @map("scheduled_at")
  status            String   @default("scheduled")
  timezone          String
  recurring         Boolean  @default(false)
  recurrencePattern Json?    @map("recurrence_pattern")
  autoGenerated     Boolean  @default(false) @map("auto_generated")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content ContentLibrary @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("content_schedule")
}

model ContentDraft {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  title            String?
  prompt           String
  enhancedPrompt   String?  @map("enhanced_prompt")
  platformSettings Json     @map("platform_settings")
  autoSaveData     Json     @map("auto_save_data")
  lastEditedAt     DateTime @map("last_edited_at")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_drafts")
}

model ContentTemplate {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  name             String
  description      String?
  promptTemplate   String   @map("prompt_template")
  platformSettings Json     @map("platform_settings")
  tags             String[]
  isPublic         Boolean  @default(false) @map("is_public")
  usageCount       Int      @default(0) @map("usage_count")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_templates")
}

model Dashboard {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  widgetConfig Json     @map("widget_config")
  layoutConfig Json     @map("layout_config")
  lastViewedAt DateTime @map("last_viewed_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dashboards")
}

enum ContentLibraryStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

// Analytics Models
model Analytics {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  contentId      String   @map("content_id")
  platform       Platform
  platformPostId String   @map("platform_post_id")
  metricType     String   @map("metric_type")
  metricValue    Int      @map("metric_value")
  recordedAt     DateTime @map("recorded_at")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content ContentLibrary @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model UserMetrics {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  platform        Platform
  metricDate      DateTime @map("metric_date") @db.Date
  followersCount  Int      @map("followers_count")
  followingCount  Int      @map("following_count")
  totalViews      BigInt   @map("total_views")
  totalEngagement BigInt   @map("total_engagement")
  postsCount      Int      @map("posts_count")
  engagementRate  Decimal  @map("engagement_rate")
  growthRate      Decimal  @map("growth_rate")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, metricDate])
  @@map("user_metrics")
}

model ContentPerformance {
  id               String   @id @default(cuid())
  contentId        String   @map("content_id")
  platform         Platform
  views            BigInt   @default(0)
  likes            Int      @default(0)
  shares           Int      @default(0)
  comments         Int      @default(0)
  saves            Int?     @default(0)
  clicks           Int?     @default(0)
  reach            BigInt?
  impressions      BigInt?
  engagementRate   Decimal  @map("engagement_rate")
  performanceScore Decimal  @map("performance_score")
  lastUpdatedAt    DateTime @map("last_updated_at")
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  content ContentLibrary @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([contentId, platform])
  @@map("content_performance")
}

model AnalyticsReport {
  id             String     @id @default(cuid())
  userId         String     @map("user_id")
  reportName     String     @map("report_name")
  reportType     String     @map("report_type")
  dateRangeStart DateTime   @map("date_range_start") @db.Date
  dateRangeEnd   DateTime   @map("date_range_end") @db.Date
  platforms      Platform[]
  filters        Json
  reportData     Json       @map("report_data")
  exportFormat   String     @map("export_format")
  generatedAt    DateTime   @default(now()) @map("generated_at")
  expiresAt      DateTime?  @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics_reports")
}

model PlatformInsights {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  platform        Platform
  insightType     String    @map("insight_type")
  insightData     Json      @map("insight_data")
  confidenceScore Decimal   @map("confidence_score")
  generatedAt     DateTime  @default(now()) @map("generated_at")
  validUntil      DateTime? @map("valid_until")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("platform_insights")
}

// Billing Models
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  stripeSubscriptionId String             @unique @map("stripe_subscription_id")
  stripeCustomerId     String             @map("stripe_customer_id")
  planId               String             @map("plan_id")
  status               SubscriptionStatus @default(ACTIVE)
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  trialStart           DateTime?          @map("trial_start")
  trialEnd             DateTime?          @map("trial_end")
  metadata             Json
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan         Plan          @relation(fields: [planId], references: [id])
  usageRecords UsageRecord[]
  invoices     Invoice[]

  @@map("subscriptions")
}

model Plan {
  id                   String   @id
  name                 String
  description          String
  priceMonthly         Decimal  @map("price_monthly")
  priceYearly          Decimal  @map("price_yearly")
  currency             String   @default("usd")
  stripePriceIdMonthly String   @map("stripe_price_id_monthly")
  stripePriceIdYearly  String   @map("stripe_price_id_yearly")
  features             Json
  limits               Json
  isActive             Boolean  @default(true) @map("is_active")
  sortOrder            Int      @map("sort_order")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model UsageRecord {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  subscriptionId     String    @map("subscription_id")
  usageType          UsageType @map("usage_type")
  quantity           Int
  recordedAt         DateTime  @map("recorded_at")
  billingPeriodStart DateTime  @map("billing_period_start")
  billingPeriodEnd   DateTime  @map("billing_period_end")
  metadata           Json
  createdAt          DateTime  @default(now()) @map("created_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

model Invoice {
  id              String        @id @default(cuid())
  userId          String        @map("user_id")
  subscriptionId  String        @map("subscription_id")
  stripeInvoiceId String        @unique @map("stripe_invoice_id")
  number          String
  status          InvoiceStatus @default(DRAFT)
  amountTotal     Decimal       @map("amount_total")
  amountPaid      Decimal       @map("amount_paid")
  currency        String        @default("usd")
  invoicePdf      String?       @map("invoice_pdf")
  dueDate         DateTime?     @map("due_date")
  paidAt          DateTime?     @map("paid_at")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model PaymentMethod {
  id                    String            @id @default(cuid())
  userId                String            @map("user_id")
  stripePaymentMethodId String            @unique @map("stripe_payment_method_id")
  type                  PaymentMethodType
  brand                 String?
  lastFour              String?           @map("last_four")
  expMonth              Int?              @map("exp_month")
  expYear               Int?              @map("exp_year")
  isDefault             Boolean           @default(false) @map("is_default")
  metadata              Json
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model BillingEvent {
  id            String           @id @default(cuid())
  userId        String           @map("user_id")
  eventType     BillingEventType @map("event_type")
  stripeEventId String?          @map("stripe_event_id")
  eventData     Json             @map("event_data")
  processed     Boolean          @default(false)
  errorMessage  String?          @map("error_message")
  createdAt     DateTime         @default(now()) @map("created_at")
  processedAt   DateTime?        @map("processed_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("billing_events")
}

// Admin Models
model AdminUser {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  role        String
  permissions Json
  lastLoginAt DateTime? @map("last_login_at")
  createdBy   String?   @map("created_by")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userManagement     UserManagement[]
  contentModerations ContentModeration[]
  supportTickets     SupportTicket[]
  auditLogs          AuditLog[]
  featureFlags       FeatureFlag[]       @relation("CreatedBy")
  featureFlagUpdates FeatureFlag[]       @relation("UpdatedBy")

  @@map("admin_users")
}

model UserManagement {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  adminId     String    @map("admin_id")
  action      String
  reason      String
  notes       String?
  effectiveAt DateTime  @map("effective_at")
  expiresAt   DateTime? @map("expires_at")
  metadata    Json
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin AdminUser @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("user_management")
}

model ContentModeration {
  id              String   @id @default(cuid())
  contentId       String   @map("content_id")
  moderatorId     String   @map("moderator_id")
  status          String
  reason          String?
  automated       Boolean  @default(false)
  confidenceScore Decimal? @map("confidence_score")
  reviewNotes     String?  @map("review_notes")
  reviewedAt      DateTime @map("reviewed_at")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  content   ContentLibrary @relation(fields: [contentId], references: [id], onDelete: Cascade)
  moderator AdminUser      @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  User      User?          @relation(fields: [userId], references: [id])
  userId    String?

  @@map("content_moderation")
}

model SystemHealth {
  id           String   @id @default(cuid())
  serviceName  String   @map("service_name")
  status       String
  responseTime Int      @map("response_time")
  errorRate    Decimal  @map("error_rate")
  cpuUsage     Decimal? @map("cpu_usage")
  memoryUsage  Decimal? @map("memory_usage")
  recordedAt   DateTime @map("recorded_at")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("system_health")
}

model AuditLog {
  id           String   @id @default(cuid())
  adminId      String?  @map("admin_id")
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String   @map("ip_address")
  userAgent    String   @map("user_agent")
  success      Boolean  @default(true)
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  admin AdminUser? @relation(fields: [adminId], references: [id], onDelete: SetNull)
  user  User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model FeatureFlag {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String
  enabled           Boolean  @default(false)
  rolloutPercentage Int      @default(0) @map("rollout_percentage")
  conditions        Json
  createdBy         String   @map("created_by")
  updatedBy         String   @map("updated_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  creator AdminUser @relation("CreatedBy", fields: [createdBy], references: [id])
  updater AdminUser @relation("UpdatedBy", fields: [updatedBy], references: [id])

  @@map("feature_flags")
}

model SupportTicket {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  assignedTo    String?   @map("assigned_to")
  subject       String
  description   String
  status        String    @default("open")
  priority      String    @default("normal")
  category      String    @default("other")
  tags          String[]
  internalNotes String?   @map("internal_notes")
  resolution    String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  resolvedAt    DateTime? @map("resolved_at")

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignee AdminUser? @relation(fields: [assignedTo], references: [id], onDelete: SetNull)

  @@map("support_tickets")
}
